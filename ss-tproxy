#!/bin/bash

main_conf='/etc/ss-tproxy/ss-tproxy.conf'
[ -f $main_conf ] && source $main_conf || { echo "[ERR] No such file or directory: '$main_conf'" 1>&2; exit 1; }

[ ! -f "$file_gfwlist_txt"  ] && { echo "[ERR] No such file or directory: '$file_gfwlist_txt'"  1>&2; exit 1; }
[ ! -f "$file_gfwlist_ext"  ] && { echo "[ERR] No such file or directory: '$file_gfwlist_ext'"  1>&2; exit 1; }
[ ! -f "$file_chnroute_txt" ] && { echo "[ERR] No such file or directory: '$file_chnroute_txt'" 1>&2; exit 1; }
[ ! -f "$file_chnroute_set" ] && { echo "[ERR] No such file or directory: '$file_chnroute_set'" 1>&2; exit 1; }

function check_command {
    command -v ip      &>/dev/null || { echo "[ERR] Require command not found: 'ip'"        1>&2; exit 1; }
    command -v dnsmasq &>/dev/null || { echo "[ERR] Require command not found: 'dnsmasq'"   1>&2; exit 1; }
    modprobe xt_TPROXY &>/dev/null || { echo "[ERR] Require kmodule not found: 'xt_TPROXY'" 1>&2; exit 1; }

    case "$mode" in
        gfwlist)
            command -v curl   &>/dev/null || { echo "[WRN]: Updater command not found: 'curl'"   1>&2;         }
            command -v base64 &>/dev/null || { echo "[WRN]: Updater command not found: 'base64'" 1>&2;         }
            command -v ipset  &>/dev/null || { echo "[ERR]: Require command not found: 'ipset'"  1>&2; exit 1; }
            command -v perl   &>/dev/null || { echo "[ERR]: Require command not found: 'perl'"   1>&2; exit 1; }
            ;;
        chnroute)
            command -v curl     &>/dev/null || { echo "[WRN]: Updater command not found: 'curl'"     1>&2;         }
            command -v ipset    &>/dev/null || { echo "[ERR]: Require command not found: 'ipset'"    1>&2; exit 1; }
            command -v chinadns &>/dev/null || { echo "[ERR]: Require command not found: 'chinadns'" 1>&2; exit 1; }
            ;;
    esac
}

function update_chnonly {
    curl -4sSkL https://raw.github.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf | perl -ne 'm@/\K.+(?=/)@; print "$&\n"' >$file_gfwlist_txt
}

function update_gfwlist {
    curl -4sSkL https://raw.github.com/gfwlist/gfwlist/master/gfwlist.txt | base64 -d | { perl -pe '
    if (/URL Keywords/i) { $null = <> until $null =~ /^!/ }
    s#^\s*+$|^!.*+$|^@@.*+$|^\[AutoProxy.*+$|^/.*/$##i;
    s@^\|\|?|\|$@@;
    s@^https?:/?/?@@i;
    s@(?:/|%).*+$@@;
    s@\*[^.*]++$@\n@;
    s@^.*?\*[^.]*+(?=[^*]+$)@@;
    s@^\*?\.|^.*\.\*?$@@;
    s@(?=[^0-9a-zA-Z.-]).*+$@@;
    s@^\d+\.\d+\.\d+\.\d+(?::\d+)?$@@;
    s@^\s*+$@@'
    echo 'twimg.edgesuite.net'
    echo -e 'blogspot.ae\nblogspot.al\nblogspot.am\nblogspot.ba\nblogspot.be\nblogspot.bg\nblogspot.bj\nblogspot.ca\nblogspot.cat\nblogspot.cf\nblogspot.ch\nblogspot.cl\nblogspot.co.at\nblogspot.co.id\nblogspot.co.il\nblogspot.co.ke\nblogspot.com\nblogspot.com.ar\nblogspot.com.au\nblogspot.com.br\nblogspot.com.by\nblogspot.com.co\nblogspot.com.cy\nblogspot.com.ee\nblogspot.com.eg\nblogspot.com.es\nblogspot.com.mt\nblogspot.com.ng\nblogspot.com.tr\nblogspot.com.uy\nblogspot.co.nz\nblogspot.co.uk\nblogspot.co.za\nblogspot.cv\nblogspot.cz\nblogspot.de\nblogspot.dk\nblogspot.fi\nblogspot.fr\nblogspot.gr\nblogspot.hk\nblogspot.hr\nblogspot.hu\nblogspot.ie\nblogspot.in\nblogspot.is\nblogspot.it\nblogspot.jp\nblogspot.kr\nblogspot.li\nblogspot.lt\nblogspot.lu\nblogspot.md\nblogspot.mk\nblogspot.mr\nblogspot.mx\nblogspot.my\nblogspot.nl\nblogspot.no\nblogspot.pe\nblogspot.pt\nblogspot.qa\nblogspot.re\nblogspot.ro\nblogspot.rs\nblogspot.ru\nblogspot.se\nblogspot.sg\nblogspot.si\nblogspot.sk\nblogspot.sn\nblogspot.td\nblogspot.tw\nblogspot.ug\nblogspot.vn'
    echo -e 'google.ac\ngoogle.ad\ngoogle.ae\ngoogle.al\ngoogle.am\ngoogle.as\ngoogle.at\ngoogle.az\ngoogle.ba\ngoogle.be\ngoogle.bf\ngoogle.bg\ngoogle.bi\ngoogle.bj\ngoogle.bs\ngoogle.bt\ngoogle.by\ngoogle.ca\ngoogle.cat\ngoogle.cc\ngoogle.cd\ngoogle.cf\ngoogle.cg\ngoogle.ch\ngoogle.ci\ngoogle.cl\ngoogle.cm\ngoogle.cn\ngoogle.co.ao\ngoogle.co.bw\ngoogle.co.ck\ngoogle.co.cr\ngoogle.co.id\ngoogle.co.il\ngoogle.co.in\ngoogle.co.jp\ngoogle.co.ke\ngoogle.co.kr\ngoogle.co.ls\ngoogle.com\ngoogle.co.ma\ngoogle.com.af\ngoogle.com.ag\ngoogle.com.ai\ngoogle.com.ar\ngoogle.com.au\ngoogle.com.bd\ngoogle.com.bh\ngoogle.com.bn\ngoogle.com.bo\ngoogle.com.br\ngoogle.com.bz\ngoogle.com.co\ngoogle.com.cu\ngoogle.com.cy\ngoogle.com.do\ngoogle.com.ec\ngoogle.com.eg\ngoogle.com.et\ngoogle.com.fj\ngoogle.com.gh\ngoogle.com.gi\ngoogle.com.gt\ngoogle.com.hk\ngoogle.com.jm\ngoogle.com.kh\ngoogle.com.kw\ngoogle.com.lb\ngoogle.com.lc\ngoogle.com.ly\ngoogle.com.mm\ngoogle.com.mt\ngoogle.com.mx\ngoogle.com.my\ngoogle.com.na\ngoogle.com.nf\ngoogle.com.ng\ngoogle.com.ni\ngoogle.com.np\ngoogle.com.om\ngoogle.com.pa\ngoogle.com.pe\ngoogle.com.pg\ngoogle.com.ph\ngoogle.com.pk\ngoogle.com.pr\ngoogle.com.py\ngoogle.com.qa\ngoogle.com.sa\ngoogle.com.sb\ngoogle.com.sg\ngoogle.com.sl\ngoogle.com.sv\ngoogle.com.tj\ngoogle.com.tr\ngoogle.com.tw\ngoogle.com.ua\ngoogle.com.uy\ngoogle.com.vc\ngoogle.com.vn\ngoogle.co.mz\ngoogle.co.nz\ngoogle.co.th\ngoogle.co.tz\ngoogle.co.ug\ngoogle.co.uk\ngoogle.co.uz\ngoogle.co.ve\ngoogle.co.vi\ngoogle.co.za\ngoogle.co.zm\ngoogle.co.zw\ngoogle.cv\ngoogle.cz\ngoogle.de\ngoogle.dj\ngoogle.dk\ngoogle.dm\ngoogle.dz\ngoogle.ee\ngoogle.es\ngoogle.fi\ngoogle.fm\ngoogle.fr\ngoogle.ga\ngoogle.ge\ngoogle.gf\ngoogle.gg\ngoogle.gl\ngoogle.gm\ngoogle.gp\ngoogle.gr\ngoogle.gy\ngoogle.hn\ngoogle.hr\ngoogle.ht\ngoogle.hu\ngoogle.ie\ngoogle.im\ngoogle.io\ngoogle.iq\ngoogle.is\ngoogle.it\ngoogle.je\ngoogle.jo\ngoogle.kg\ngoogle.ki\ngoogle.kz\ngoogle.la\ngoogle.li\ngoogle.lk\ngoogle.lt\ngoogle.lu\ngoogle.lv\ngoogle.md\ngoogle.me\ngoogle.mg\ngoogle.mk\ngoogle.ml\ngoogle.mn\ngoogle.ms\ngoogle.mu\ngoogle.mv\ngoogle.mw\ngoogle.ne\ngoogle.net\ngoogle.nl\ngoogle.no\ngoogle.nr\ngoogle.nu\ngoogle.org\ngoogle.pl\ngoogle.pn\ngoogle.ps\ngoogle.pt\ngoogle.ro\ngoogle.rs\ngoogle.ru\ngoogle.rw\ngoogle.sc\ngoogle.se\ngoogle.sh\ngoogle.si\ngoogle.sk\ngoogle.sm\ngoogle.sn\ngoogle.so\ngoogle.sr\ngoogle.st\ngoogle.td\ngoogle.tg\ngoogle.tk\ngoogle.tl\ngoogle.tm\ngoogle.tn\ngoogle.to\ngoogle.tt\ngoogle.vg\ngoogle.vu\ngoogle.ws'
    } | sort | uniq >$file_gfwlist_txt
}

function update_chnroute {
    chnroute_url="https://github.com/17mon/china_ip_list/raw/master/china_ip_list.txt"
    { curl -4sSkL "$chnroute_url"; echo; } | grep -Ev '^\s*$|^\s*#' >$file_chnroute_txt
    echo '-N chnroute hash:net' >$file_chnroute_set; sed -r 's/^.+$/-A chnroute &/' $file_chnroute_txt >>$file_chnroute_set
}

function flush_dnscache {
    netstat -lnpu | awk -F/ '/:60053\s.+dnsmasq/ {print $(NF-1)}' | awk '{print $NF}' | sort | uniq | xargs kill -HUP &>/dev/null
}

function start_proxy {
    eval "$proxy_runcmd"
}

function start_resolver {
    if [ $(grep -Ec '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' <<<"$proxy_server") -eq 0 ]; then
        proxy_server_addr=$(getent hosts $proxy_server | awk '{print $1}' | head -n1)
    fi
case "$mode" in
global)
    dnsmasq -C <(cat <<EOF
$([ "$dnsmasq_log_enable" = 'true' ] && echo 'log-queries')
log-facility = $dnsmasq_log_file
log-async = 20
domain-needed
cache-size = $dnsmasq_cache_size
$([ $(dnsmasq --help | grep -c min-cache-ttl) -ne 0 ] && echo "min-cache-ttl = $dnsmasq_cache_time")
no-negcache
no-resolv
port = 60053
server = ${dns_remote/:/#}
$([ -n "$proxy_server_addr" ] && echo "address = /$proxy_server/$proxy_server_addr")
EOF
)
    ;;
gfwlist)
    dnsmasq -C <(cat <<EOF
$([ "$dnsmasq_log_enable" = 'true' ] && echo 'log-queries')
log-facility = $dnsmasq_log_file
log-async = 20
domain-needed
cache-size = $dnsmasq_cache_size
$([ $(dnsmasq --help | grep -c min-cache-ttl) -ne 0 ] && echo "min-cache-ttl = $dnsmasq_cache_time")
no-negcache
no-resolv
port = 60053
server = $dns_direct
$([ -n "$proxy_server_addr" ] && echo "address = /$proxy_server/$proxy_server_addr")
$(perl -pe "s@^.*+\$@server=/$&/${dns_remote/:/#}\nipset=/$&/gfwlist@" $file_gfwlist_txt <(
perl -ne 'print unless m@^\s|\s\n$|^#|^\d++\.\d++\.\d++\.\d++(?:/\d++)?$@' $file_gfwlist_ext
))
EOF
)
    ;;
chnroute)
    temp_chnroute_txt=$(mktemp)
    cat $file_chnroute_txt >$temp_chnroute_txt
    echo "$dns_direct/32" >>$temp_chnroute_txt

    chinadns_params="-b 0.0.0.0 -p 65353 -s $dns_direct,$dns_remote -c $temp_chnroute_txt"
    [ "$chinadns_mutation" = 'true' ] && chinadns_params+=' -m'
    [ "$chinadns_verbose"  = 'true' ] && chinadns_params+=' -v'

    (chinadns $chinadns_params </dev/null &>>$chinadns_logfile &)

    dnsmasq -C <(cat <<EOF
$([ "$dnsmasq_log_enable" = 'true' ] && echo 'log-queries')
log-facility = $dnsmasq_log_file
log-async = 20
domain-needed
cache-size = $dnsmasq_cache_size
$([ $(dnsmasq --help | grep -c min-cache-ttl) -ne 0 ] && echo "min-cache-ttl = $dnsmasq_cache_time")
no-negcache
no-resolv
port = 60053
server = 127.0.0.1#65353
$([ -n "$proxy_server_addr" ] && echo "address = /$proxy_server/$proxy_server_addr")
EOF
)
    ;;
esac
}

function start_iptables {
    function dec2bin {
        for ((n = $1; n > 0; n >>= 1)); do bit="$((n & 1))$bit"; done
        printf "%08d\n" "$bit"
    }

    function net2bin {
        net=$(awk -F/ '{print $1}' <<<$1)
        len=$(awk -F/ '{print $2}' <<<$1)
        IFS='.' read -ra bytes <<<"$net"
        for byte in "${bytes[@]}"; do result+="$(dec2bin $byte)"; done
        echo "${result:0:len}"
    }

    for cidr in "${ipts_intranet[@]}"; do
        curnet=$(net2bin $cidr)
        for stdnet in 00001010 101011000001 1010100111111110 1100000010101000; do
            [[ "$curnet" == "$stdnet"* ]] && continue 2
        done
        ipts_intranet_nonstd+=($cidr)
    done

if [ "$proxy_tproxy" = 'true' ]; then
case "$mode" in
gfwlist)
    iptables -t nat -F OUTPUT
    iptables -t nat -F PREROUTING
    iptables -t nat -F POSTROUTING

    iptables -t mangle -F OUTPUT
    iptables -t mangle -F PREROUTING

    iptables -t mangle -F SETMARK &>/dev/null
    iptables -t mangle -X SETMARK &>/dev/null

    ipset -N gfwlist hash:net &>/dev/null
    perl -ne 'print if m@^\d++\.\d++\.\d++\.\d++(?:/\d++)?$@' $file_gfwlist_ext | xargs -n1 ipset -A gfwlist &>/dev/null

    iptables -t mangle -N SETMARK
    iptables -t mangle -A SETMARK -p udp -d ${dns_remote%:*}     -j MARK --set-mark $ipts_rt_mark
    iptables -t mangle -A SETMARK -m set --match-set gfwlist dst -j MARK --set-mark $ipts_rt_mark

    iptables -t mangle -A OUTPUT -p tcp -j SETMARK
    iptables -t mangle -A OUTPUT -p udp -j SETMARK

    iptables -t nat    -A OUTPUT -p udp -d 127.0.0.1 --dport 53 -j REDIRECT --to-ports 60053

    for intranet in "${ipts_intranet[@]}"; do
        iptables -t mangle -A PREROUTING -p udp -s $intranet --dport 53 -m mark ! --mark $ipts_rt_mark -j ACCEPT
        iptables -t nat    -A PREROUTING -p udp -s $intranet --dport 53 -m mark ! --mark $ipts_rt_mark -j REDIRECT --to-ports 60053

        iptables -t mangle -A PREROUTING -p tcp -s $intranet            -m mark ! --mark $ipts_rt_mark -j SETMARK
        iptables -t mangle -A PREROUTING -p udp -s $intranet            -m mark ! --mark $ipts_rt_mark -j SETMARK

        iptables -t nat -A POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE
    done

    iptables -t mangle -A PREROUTING -m mark --mark $ipts_rt_mark -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port ${proxy_tcport}
    iptables -t mangle -A PREROUTING -m mark --mark $ipts_rt_mark -p udp -j TPROXY --on-ip 127.0.0.1 --on-port ${proxy_udport}

    ip route add local 0/0 dev lo     table $ipts_rt_tab
    ip rule  add fwmark $ipts_rt_mark table $ipts_rt_tab
    ;;
global|chnroute)
    iptables -t nat -F OUTPUT
    iptables -t nat -F PREROUTING
    iptables -t nat -F POSTROUTING

    iptables -t mangle -F OUTPUT
    iptables -t mangle -F PREROUTING

    iptables -t mangle -F SETMARK &>/dev/null
    iptables -t mangle -X SETMARK &>/dev/null

    iptables -t mangle -N SETMARK
    iptables -t mangle -A SETMARK -d 0/8        -j RETURN
    iptables -t mangle -A SETMARK -d 10/8       -j RETURN
    iptables -t mangle -A SETMARK -d 127/8      -j RETURN
    iptables -t mangle -A SETMARK -d 169.254/16 -j RETURN
    iptables -t mangle -A SETMARK -d 172.16/12  -j RETURN
    iptables -t mangle -A SETMARK -d 192.168/16 -j RETURN
    for cidr in "${ipts_intranet_nonstd[@]}"; do
        iptables -t mangle -A SETMARK -d $cidr -j RETURN
    done
    iptables -t mangle -A SETMARK -d 224/4 -j RETURN
    iptables -t mangle -A SETMARK -d 240/4 -j RETURN
    iptables -t mangle -A SETMARK -d $proxy_server -j RETURN
    if [ "$mode" = chnroute ]; then
        ipset -X chnroute &>/dev/null
        ipset -R <$file_chnroute_set
        iptables -t mangle -A SETMARK -m set --match-set chnroute dst -j RETURN
    fi
    iptables -t mangle -A SETMARK -j MARK --set-mark $ipts_rt_mark

    iptables -t mangle -A OUTPUT -p tcp -j SETMARK
    iptables -t mangle -A OUTPUT -p udp -j SETMARK

    iptables -t nat    -A OUTPUT -p udp -d 127.0.0.1 --dport 53 -j REDIRECT --to-ports 60053

    for intranet in "${ipts_intranet[@]}"; do
        iptables -t mangle -A PREROUTING -p udp -s $intranet --dport 53 -m mark ! --mark $ipts_rt_mark -j ACCEPT
        iptables -t nat    -A PREROUTING -p udp -s $intranet --dport 53 -m mark ! --mark $ipts_rt_mark -j REDIRECT --to-ports 60053

        iptables -t mangle -A PREROUTING -p tcp -s $intranet            -m mark ! --mark $ipts_rt_mark -j SETMARK
        iptables -t mangle -A PREROUTING -p udp -s $intranet            -m mark ! --mark $ipts_rt_mark -j SETMARK

        iptables -t nat -A POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE
    done

    iptables -t mangle -A PREROUTING -m mark --mark $ipts_rt_mark -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port ${proxy_tcport}
    iptables -t mangle -A PREROUTING -m mark --mark $ipts_rt_mark -p udp -j TPROXY --on-ip 127.0.0.1 --on-port ${proxy_udport}

    ip route add local 0/0 dev lo     table $ipts_rt_tab
    ip rule  add fwmark $ipts_rt_mark table $ipts_rt_tab
    ;;
esac
else
    echo # TODO
fi
}

function start_rule {
case "$mode" in
tproxy_global*|tproxy_chnroute*|v2ray_global|v2ray_chnroute)
    [[ "$mode" == v* ]] && server_addr=$v2ray_server
    [[ "$mode" == v* ]] && redir_port=${v2ray_redir#*:} || redir_port=60080

    iptables -t nat -F OUTPUT
    iptables -t nat -F PREROUTING
    iptables -t nat -F POSTROUTING
    iptables -t nat -F SS-TCP &>/dev/null
    iptables -t nat -X SS-TCP &>/dev/null

    iptables -t nat -N SS-TCP
    iptables -t nat -A SS-TCP -d 0/8 -j RETURN
    iptables -t nat -A SS-TCP -d 10/8 -j RETURN
    iptables -t nat -A SS-TCP -d 127/8 -j RETURN
    iptables -t nat -A SS-TCP -d 169.254/16 -j RETURN
    iptables -t nat -A SS-TCP -d 172.16/12 -j RETURN
    iptables -t nat -A SS-TCP -d 192.168/16 -j RETURN
    for cidr in "${iptables_intranet_nonstd[@]}"; do
        iptables -t nat -A SS-TCP -d $cidr -j RETURN
    done
    iptables -t nat -A SS-TCP -d 224/4 -j RETURN
    iptables -t nat -A SS-TCP -d 240/4 -j RETURN
    iptables -t nat -A SS-TCP -d $server_addr -j RETURN
    if [[ "$mode" == *chnroute* ]]; then
        ipset -X chnroute &>/dev/null
        ipset -R <$iptables_ipset_file
        iptables -t nat -A SS-TCP -m set --match-set chnroute dst -j RETURN
    fi
    iptables -t nat -A SS-TCP -p tcp -j REDIRECT --to-ports $redir_port

    if [[ "$mode" != *tcp || "$mode" == v* ]]; then
        iptables -t mangle -F PREROUTING
        iptables -t mangle -F SS-UDP &>/dev/null
        iptables -t mangle -X SS-UDP &>/dev/null

        iptables -t mangle -N SS-UDP
        iptables -t mangle -A SS-UDP -d 0/8 -j RETURN
        iptables -t mangle -A SS-UDP -d 10/8 -j RETURN
        iptables -t mangle -A SS-UDP -d 127/8 -j RETURN
        iptables -t mangle -A SS-UDP -d 169.254/16 -j RETURN
        iptables -t mangle -A SS-UDP -d 172.16/12 -j RETURN
        iptables -t mangle -A SS-UDP -d 192.168/16 -j RETURN
        for cidr in "${iptables_intranet_nonstd[@]}"; do
            iptables -t mangle -A SS-UDP -d $cidr -j RETURN
        done
        iptables -t mangle -A SS-UDP -d 224/4 -j RETURN
        iptables -t mangle -A SS-UDP -d 240/4 -j RETURN
        iptables -t mangle -A SS-UDP -d $server_addr -j RETURN
        [[ "$mode" == *chnroute* ]] && iptables -t mangle -A SS-UDP -m set --match-set chnroute dst -j RETURN
        iptables -t mangle -A SS-UDP -p udp -j TPROXY --tproxy-mark $iptables_pbr_fwmark --on-ip 127.0.0.1 --on-port $redir_port

        ip route add local 0/0 dev lo table $iptables_pbr_number
        ip rule add fwmark $iptables_pbr_fwmark table $iptables_pbr_number
    fi

    iptables -t nat -A OUTPUT -p tcp -j SS-TCP
    for intranet in "${iptables_intranet[@]}"; do
        if [[ "$mode" == *tcp ]]; then
            iptables -t nat -A PREROUTING -p tcp -s $intranet -j SS-TCP
            iptables -t nat -A PREROUTING -p udp -s $intranet ! -d $intranet --dport 53 -j REDIRECT --to-ports 53
        else
            iptables -t mangle -A PREROUTING -p udp -s $intranet ! -d $intranet --dport 53 -j ACCEPT
            iptables -t nat -A PREROUTING -p udp -s $intranet ! -d $intranet --dport 53 -j REDIRECT --to-ports 53
            iptables -t mangle -A PREROUTING -p udp -s $intranet -j SS-UDP
            iptables -t nat -A PREROUTING -p tcp -s $intranet -j SS-TCP
        fi
        iptables -t nat -A POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE
    done
    ;;
tproxy_gfwlist*|v2ray_gfwlist)
    [[ "$mode" == v* ]] && redir_port=${v2ray_redir#*:} || redir_port=60080

    iptables -t nat -F OUTPUT
    iptables -t nat -F PREROUTING
    iptables -t nat -F POSTROUTING
    iptables -t nat -F SS-TCP &>/dev/null
    iptables -t nat -X SS-TCP &>/dev/null

    ipset -N gfwlist hash:net &>/dev/null
    perl -ne 'print if m@^\d++\.\d++\.\d++\.\d++(?:/\d++)?$@' $dnsmasq_gfwlist_ext | xargs -n1 ipset -A gfwlist &>/dev/null

    iptables -t nat -N SS-TCP
    [[ "$mode" == *tcp ]] && iptables -t nat -A SS-TCP -p tcp -d ${dns_remote%%:*} -j REDIRECT --to-ports 60080
    iptables -t nat -A SS-TCP -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-ports $redir_port

    if [[ "$mode" != *tcp || "$mode" == v* ]]; then
        iptables -t mangle -F PREROUTING
        iptables -t mangle -F SS-UDP &>/dev/null
        iptables -t mangle -X SS-UDP &>/dev/null

        iptables -t mangle -N SS-UDP
        iptables -t mangle -A SS-UDP -p udp -m set --match-set gfwlist dst -j TPROXY --tproxy-mark $iptables_pbr_fwmark --on-ip 127.0.0.1 --on-port $redir_port

        ip route add local 0/0 dev lo table $iptables_pbr_number
        ip rule add fwmark $iptables_pbr_fwmark table $iptables_pbr_number
    fi

    iptables -t nat -A OUTPUT -p tcp -j SS-TCP
    for intranet in "${iptables_intranet[@]}"; do
        if [[ "$mode" == *tcp ]]; then
            iptables -t nat -A PREROUTING -p tcp -s $intranet -j SS-TCP
            iptables -t nat -A PREROUTING -p udp -s $intranet ! -d $intranet --dport 53 -j REDIRECT --to-ports 53
        else
            iptables -t mangle -A PREROUTING -p udp -s $intranet ! -d $intranet --dport 53 -j ACCEPT
            iptables -t nat -A PREROUTING -p udp -s $intranet ! -d $intranet --dport 53 -j REDIRECT --to-ports 53
            iptables -t mangle -A PREROUTING -p udp -s $intranet -j SS-UDP
            iptables -t nat -A PREROUTING -p tcp -s $intranet -j SS-TCP
        fi
        iptables -t nat -A POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE
    done
    ;;
esac
}

function start_kopts {
    [ $(sysctl net.ipv4.ip_forward | awk '{print $3}') -ne 1 ] && sysctl -w net.ipv4.ip_forward=1 &>/dev/null
    [[ "$mode" == tun2socks* ]] && {
        [ $(sysctl net.ipv4.conf.$tun2socks_tundev.rp_filter | awk '{print $3}') -ne 2 ] &&
            sysctl -w net.ipv4.conf.$tun2socks_tundev.rp_filter=2 &>/dev/null
    }
}

function dns_proxy {
    while umount /etc/resolv.conf; do :; done &>/dev/null
    resolv=$(mktemp)
    chmod 0644 $resolv
    cat <<EOF >$resolv
# Generated by ss-tproxy at $(date '+%F %T')
nameserver 127.0.0.1
EOF
    mount -B $resolv /etc/resolv.conf
    rm -f $resolv &>/dev/null
}

function start {
    check_depend
    while umount /etc/resolv.conf; do :; done &>/dev/null
    start_socks
    start_dns
    start_rule
    start_kopts
    dns_proxy
    rm -f $chinadns_chnroute_temp &>/dev/null
}

function stop {
    while umount /etc/resolv.conf; do :; done &>/dev/null

    iptables -t mangle -F SETMARK &>/dev/null
    iptables -t mangle -X SETMARK &>/dev/null

    iptables -t nat -F OUTPUT
    iptables -t nat -F PREROUTING
    iptables -t nat -F POSTROUTING
    iptables -t nat -F SS-TCP &>/dev/null
    iptables -t nat -X SS-TCP &>/dev/null

    iptables -t mangle -F OUTPUT
    iptables -t mangle -F PREROUTING
    iptables -t mangle -F SS-UDP &>/dev/null
    iptables -t mangle -X SS-UDP &>/dev/null
    iptables -t mangle -F TUN2SOCKS &>/dev/null
    iptables -t mangle -X TUN2SOCKS &>/dev/null

    for intranet in "${iptables_intranet[@]}"; do
        iptables -t nat -A PREROUTING -p udp -s $intranet -d $intranet --dport 53 -j DNAT --to-destination $dns_direct
        iptables -t nat -A POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE
    done

    ipset -X chnroute &>/dev/null

    ip rule show | grep "fwmark $iptables_pbr_fwmark" | awk -F: '{print $1}' | xargs -n1 ip rule del pref &>/dev/null
    ip route flush table $iptables_pbr_number &>/dev/null

    pkill -9 '^chinadns$'
    pkill -9 '^dnsforwarder$'

    if [[ "$mode" == tlspxy* ]]; then
        ss -lnpu | grep 'dnsmasq' | grep ':60053\s' | grep -Eo 'pid=[0-9]+' | awk -F= '{print $2}' | sort -n | uniq | xargs kill -9 &>/dev/null
    else
        ss -lnpu | grep 'dnsmasq' | grep ':53\s' | grep -Eo 'pid=[0-9]+' | awk -F= '{print $2}' | sort -n | uniq | xargs kill -9 &>/dev/null
    fi

    [[ "$mode" == v2ray_*     ]] && eval "$v2ray_stopcmd" &>/dev/null
    [[ "$mode" == tlspxy_*    ]] && eval "$tlspxy_stopcmd" &>/dev/null
    [[ "$mode" == tun2socks_* ]] && { eval "$socks5_stopcmd" &>/dev/null; pkill -9 '^tun2socks$'; }
    [[ "$mode" == tproxy_*    ]] && { pkill -9 '^ss-redir$'; pkill -9 '^ss-tunnel$'; pkill -9 '^ssr-redir$'; pkill -9 '^ssr-tunnel$'; }
}

function status {
case "$mode" in
    v2ray_global)
        echo "mode:           v2ray_global"
        rport=${v2ray_redir#*:}; tport=${v2ray_tunnel#*:}
        [ $(ss -lnpt | grep ":$rport\s" | wc -l)                -ne 0 ] && echo -e "v2-redir/tcp       \e[32m[running]\e[0m" || echo -e "v2-redir/tcp       \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$rport\s" | wc -l)                -ne 0 ] && echo -e "v2-redir/udp       \e[32m[running]\e[0m" || echo -e "v2-redir/udp       \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$tport\s" | wc -l)                -ne 0 ] && echo -e "v2-tunnel/udp      \e[32m[running]\e[0m" || echo -e "v2-tunnel/udp      \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l)    -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    v2ray_gfwlist)
        echo "mode:          v2ray_gfwlist"
        rport=${v2ray_redir#*:}; tport=${v2ray_tunnel#*:}
        [ $(ss -lnpt | grep ":$rport\s" | wc -l)                -ne 0 ] && echo -e "v2-redir/tcp       \e[32m[running]\e[0m" || echo -e "v2-redir/tcp       \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$rport\s" | wc -l)                -ne 0 ] && echo -e "v2-redir/udp       \e[32m[running]\e[0m" || echo -e "v2-redir/udp       \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$tport\s" | wc -l)                -ne 0 ] && echo -e "v2-tunnel/udp      \e[32m[running]\e[0m" || echo -e "v2-tunnel/udp      \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l)    -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    v2ray_chnroute)
        echo "mode:         v2ray_chnroute"
        rport=${v2ray_redir#*:}; tport=${v2ray_tunnel#*:}
        [ $(ss -lnpt | grep ":$rport\s" | wc -l)                -ne 0 ] && echo -e "v2-redir/tcp       \e[32m[running]\e[0m" || echo -e "v2-redir/tcp       \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$rport\s" | wc -l)                -ne 0 ] && echo -e "v2-redir/udp       \e[32m[running]\e[0m" || echo -e "v2-redir/udp       \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$tport\s" | wc -l)                -ne 0 ] && echo -e "v2-tunnel/udp      \e[32m[running]\e[0m" || echo -e "v2-tunnel/udp      \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^chinadns$')                              -ne 0 ] && echo -e "chinadns:          \e[32m[running]\e[0m" || echo -e "chinadns:          \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l)    -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tlspxy_global)
        echo "mode:          tlspxy_global"
        tport=${tlspxy_tcport#*:}; uport=${tlspxy_udport#*:}
        [ $(ss -lnpt | grep ":$tport\s" | wc -l)                -ne 0 ] && echo -e "tlspxy/tcp         \e[32m[running]\e[0m" || echo -e "tlspxy/tcp         \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$uport\s" | wc -l)                -ne 0 ] && echo -e "tlspxy/udp         \e[32m[running]\e[0m" || echo -e "tlspxy/udp         \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':60053\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tlspxy_gfwlist)
        echo "mode:         tlspxy_gfwlist"
        tport=${tlspxy_tcport#*:}; uport=${tlspxy_udport#*:}
        [ $(ss -lnpt | grep ":$tport\s" | wc -l)                -ne 0 ] && echo -e "tlspxy/tcp         \e[32m[running]\e[0m" || echo -e "tlspxy/tcp         \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$uport\s" | wc -l)                -ne 0 ] && echo -e "tlspxy/udp         \e[32m[running]\e[0m" || echo -e "tlspxy/udp         \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':60053\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tlspxy_chnroute)
        echo "mode:        tlspxy_chnroute"
        tport=${tlspxy_tcport#*:}; uport=${tlspxy_udport#*:}
        [ $(ss -lnpt | grep ":$tport\s" | wc -l)                -ne 0 ] && echo -e "tlspxy/tcp         \e[32m[running]\e[0m" || echo -e "tlspxy/tcp         \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$uport\s" | wc -l)                -ne 0 ] && echo -e "tlspxy/udp         \e[32m[running]\e[0m" || echo -e "tlspxy/udp         \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^chinadns$')                              -ne 0 ] && echo -e "chinadns:          \e[32m[running]\e[0m" || echo -e "chinadns:          \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':60053\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tproxy_global)
        echo "mode:          tproxy_global"
        if [ "$server_use_ssr" != 'true' ]; then
            [ $(pgrep -c '^ss-redir$') -ne 0 ] && echo -e "ss-redir:          \e[32m[running]\e[0m" || echo -e "ss-redir:          \e[35m[stopped]\e[0m"
            [ $(pgrep -c '^ss-tunnel$') -ne 0 ] && echo -e "ss-tunnel:         \e[32m[running]\e[0m" || echo -e "ss-tunnel:         \e[35m[stopped]\e[0m"
        else
            [ $(pgrep -c '^ssr-redir$') -ne 0 ] && echo -e "ssr-redir:         \e[32m[running]\e[0m" || echo -e "ssr-redir:         \e[35m[stopped]\e[0m"
            [ $(pgrep -c '^ssr-tunnel$') -ne 0 ] && echo -e "ssr-tunnel:        \e[32m[running]\e[0m" || echo -e "ssr-tunnel:        \e[35m[stopped]\e[0m"
        fi
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tproxy_global_tcp)
        echo "mode:      tproxy_global_tcp"
        if [ "$server_use_ssr" != 'true' ]; then
            [ $(pgrep -c '^ss-redir$') -ne 0 ] && echo -e "ss-redir:          \e[32m[running]\e[0m" || echo -e "ss-redir:          \e[35m[stopped]\e[0m"
        else
            [ $(pgrep -c '^ssr-redir$') -ne 0 ] && echo -e "ssr-redir:         \e[32m[running]\e[0m" || echo -e "ssr-redir:         \e[35m[stopped]\e[0m"
        fi
        [ $(pgrep -c '^dnsforwarder$') -ne 0 ] && echo -e "dnsforwarder:      \e[32m[running]\e[0m" || echo -e "dnsforwarder:      \e[35m[stopped]\e[0m"
        ;;
    tproxy_gfwlist)
        echo "mode:         tproxy_gfwlist"
        if [ "$server_use_ssr" != 'true' ]; then
            [ $(pgrep -c '^ss-redir$') -ne 0 ] && echo -e "ss-redir:          \e[32m[running]\e[0m" || echo -e "ss-redir:          \e[35m[stopped]\e[0m"
            [ $(pgrep -c '^ss-tunnel$') -ne 0 ] && echo -e "ss-tunnel:         \e[32m[running]\e[0m" || echo -e "ss-tunnel:         \e[35m[stopped]\e[0m"
        else
            [ $(pgrep -c '^ssr-redir$') -ne 0 ] && echo -e "ssr-redir:         \e[32m[running]\e[0m" || echo -e "ssr-redir:         \e[35m[stopped]\e[0m"
            [ $(pgrep -c '^ssr-tunnel$') -ne 0 ] && echo -e "ssr-tunnel:        \e[32m[running]\e[0m" || echo -e "ssr-tunnel:        \e[35m[stopped]\e[0m"
        fi
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tproxy_gfwlist_tcp)
        echo "mode:     tproxy_gfwlist_tcp"
        if [ "$server_use_ssr" != 'true' ]; then
            [ $(pgrep -c '^ss-redir$') -ne 0 ] && echo -e "ss-redir:          \e[32m[running]\e[0m" || echo -e "ss-redir:          \e[35m[stopped]\e[0m"
        else
            [ $(pgrep -c '^ssr-redir$') -ne 0 ] && echo -e "ssr-redir:         \e[32m[running]\e[0m" || echo -e "ssr-redir:         \e[35m[stopped]\e[0m"
        fi
        [ $(pgrep -c '^dnsforwarder$') -ne 0 ] && echo -e "dnsforwarder:      \e[32m[running]\e[0m" || echo -e "dnsforwarder:      \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tproxy_chnroute)
        echo "mode:        tproxy_chnroute"
        if [ "$server_use_ssr" != 'true' ]; then
            [ $(pgrep -c '^ss-redir$') -ne 0 ] && echo -e "ss-redir:          \e[32m[running]\e[0m" || echo -e "ss-redir:          \e[35m[stopped]\e[0m"
            [ $(pgrep -c '^ss-tunnel$') -ne 0 ] && echo -e "ss-tunnel:         \e[32m[running]\e[0m" || echo -e "ss-tunnel:         \e[35m[stopped]\e[0m"
        else
            [ $(pgrep -c '^ssr-redir$') -ne 0 ] && echo -e "ssr-redir:         \e[32m[running]\e[0m" || echo -e "ssr-redir:         \e[35m[stopped]\e[0m"
            [ $(pgrep -c '^ssr-tunnel$') -ne 0 ] && echo -e "ssr-tunnel:        \e[32m[running]\e[0m" || echo -e "ssr-tunnel:        \e[35m[stopped]\e[0m"
        fi
        [ $(pgrep -c '^chinadns$') -ne 0 ] && echo -e "chinadns:          \e[32m[running]\e[0m" || echo -e "chinadns:          \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tproxy_chnroute_tcp)
        echo "mode:    tproxy_chnroute_tcp"
        if [ "$server_use_ssr" != 'true' ]; then
            [ $(pgrep -c '^ss-redir$') -ne 0 ] && echo -e "ss-redir:          \e[32m[running]\e[0m" || echo -e "ss-redir:          \e[35m[stopped]\e[0m"
        else
            [ $(pgrep -c '^ssr-redir$') -ne 0 ] && echo -e "ssr-redir:         \e[32m[running]\e[0m" || echo -e "ssr-redir:         \e[35m[stopped]\e[0m"
        fi
        [ $(ss -lnpu | grep ':60053\s' | wc -l) -ne 0 ] && echo -e "dnsforwarder0:     \e[32m[running]\e[0m" || echo -e "dnsforwarder0:     \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^chinadns$') -ne 0 ] && echo -e "chinadns:          \e[32m[running]\e[0m" || echo -e "chinadns:          \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsforwarder1:     \e[32m[running]\e[0m" || echo -e "dnsforwarder1:     \e[35m[stopped]\e[0m"
        ;;
    tun2socks_global)
        echo "mode:       tun2socks_global"
        port=$(echo $socks5_listen | awk -F: '{print $2}')
        [ $(ss -lnpt | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/tcp:        \e[32m[running]\e[0m" || echo -e "socks5/tcp:        \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/udp:        \e[32m[running]\e[0m" || echo -e "socks5/udp:        \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^tun2socks$') -ne 0 ] && echo -e "tun2socks:         \e[32m[running]\e[0m" || echo -e "tun2socks:         \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tun2socks_global_tcp)
        echo "mode:   tun2socks_global_tcp"
        port=$(echo $socks5_listen | awk -F: '{print $2}')
        [ $(ss -lnpt | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/tcp:        \e[32m[running]\e[0m" || echo -e "socks5/tcp:        \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^tun2socks$') -ne 0 ] && echo -e "tun2socks:         \e[32m[running]\e[0m" || echo -e "tun2socks:         \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^dnsforwarder$') -ne 0 ] && echo -e "dnsforwarder:      \e[32m[running]\e[0m" || echo -e "dnsforwarder:      \e[35m[stopped]\e[0m"
        ;;
    tun2socks_gfwlist)
        echo "mode:      tun2socks_gfwlist"
        port=$(echo $socks5_listen | awk -F: '{print $2}')
        [ $(ss -lnpt | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/tcp:        \e[32m[running]\e[0m" || echo -e "socks5/tcp:        \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/udp:        \e[32m[running]\e[0m" || echo -e "socks5/udp:        \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^tun2socks$') -ne 0 ] && echo -e "tun2socks:         \e[32m[running]\e[0m" || echo -e "tun2socks:         \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tun2socks_gfwlist_tcp)
        echo "mode:  tun2socks_gfwlist_tcp"
        port=$(echo $socks5_listen | awk -F: '{print $2}')
        [ $(ss -lnpt | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/tcp:        \e[32m[running]\e[0m" || echo -e "socks5/tcp:        \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^tun2socks$') -ne 0 ] && echo -e "tun2socks:         \e[32m[running]\e[0m" || echo -e "tun2socks:         \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^dnsforwarder$') -ne 0 ] && echo -e "dnsforwarder:      \e[32m[running]\e[0m" || echo -e "dnsforwarder:      \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tun2socks_chnroute)
        echo "mode:     tun2socks_chnroute"
        port=$(echo $socks5_listen | awk -F: '{print $2}')
        [ $(ss -lnpt | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/tcp:        \e[32m[running]\e[0m" || echo -e "socks5/tcp:        \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/udp:        \e[32m[running]\e[0m" || echo -e "socks5/udp:        \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^tun2socks$') -ne 0 ] && echo -e "tun2socks:         \e[32m[running]\e[0m" || echo -e "tun2socks:         \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^chinadns$') -ne 0 ] && echo -e "chinadns:          \e[32m[running]\e[0m" || echo -e "chinadns:          \e[35m[stopped]\e[0m"
        [ $(ss -lnp | grep 'dnsmasq' | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsmasq:           \e[32m[running]\e[0m" || echo -e "dnsmasq:           \e[35m[stopped]\e[0m"
        ;;
    tun2socks_chnroute_tcp)
        echo "mode: tun2socks_chnroute_tcp"
        port=$(echo $socks5_listen | awk -F: '{print $2}')
        [ $(ss -lnpt | grep ":$port\s" | wc -l) -ne 0 ] && echo -e "socks5/tcp:        \e[32m[running]\e[0m" || echo -e "socks5/tcp:        \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^tun2socks$') -ne 0 ] && echo -e "tun2socks:         \e[32m[running]\e[0m" || echo -e "tun2socks:         \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ':60053\s' | wc -l) -ne 0 ] && echo -e "dnsforwarder0:     \e[32m[running]\e[0m" || echo -e "dnsforwarder0:     \e[35m[stopped]\e[0m"
        [ $(pgrep -c '^chinadns$') -ne 0 ] && echo -e "chinadns:          \e[32m[running]\e[0m" || echo -e "chinadns:          \e[35m[stopped]\e[0m"
        [ $(ss -lnpu | grep ':53\s' | wc -l) -ne 0 ] && echo -e "dnsforwarder1:     \e[32m[running]\e[0m" || echo -e "dnsforwarder1:     \e[35m[stopped]\e[0m"
        ;;
esac
}

function dump_ipts {
    echo -e "\e[36;1m==> mangle <==\e[0m"
    iptables -t mangle -nvL --line-numbers
    echo
    echo -e "\e[36;1m==> nat <==\e[0m"
    iptables -t nat -nvL --line-numbers
}

function flush_ipts {
    iptables -t raw -F
    iptables -t raw -X
    iptables -t mangle -F
    iptables -t mangle -X
    iptables -t nat -F
    iptables -t nat -X
    iptables -t filter -F
    iptables -t filter -X
}

function usage {
cat <<EOF
Usage: ss-tproxy <COMMAND>
COMMAND := {
    start               start ss-tproxy
    stop                stop ss-tproxy
    restart             restart ss-tproxy
    status              status of ss-tproxy
    dump-ipts           dump iptables rules
    flush-ipts          flush iptables rules
    flush-cache         flush dns cache
    flush-gfwlist       flush ipset-gfwlist
    update-chnonly      update chnonly
    update-gfwlist      update gfwlist
    update-chnroute     update chnroute
    check-depend        check dependency
    help                show this help and exit
}
Issues or Bug report: zfl9.com@gmail.com (Otokaze)
See https://www.zfl9.com/ss-redir.html for more details
EOF
}

case $1 in
    start)              start; status;;
    stop)               stop; status;;
    status)             status;;
    r*)                 stop; status; echo; start; status;;
    d*)                 dump_ipts;;
    flush-ipts)         flush_ipts;;
    flush-cache)        flush_cache;;
    flush-gfwlist)      ipset -F gfwlist &>/dev/null;;
    update-chnonly)     update_chnonly;;
    update-gfwlist)     update_gfwlist;;
    update-chnroute)    update_chnroute;;
    c*)                 check_depend;;
    h*)                 usage;;
    *)                  usage; exit 1;;
esac
