#!/bin/bash
set -o nounset
set -o errexit
set -o pipefail

PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

ss_tproxy_config='/etc/ss-tproxy/ss-tproxy.conf'

ipv4_reserved_ipaddrs=(
    0.0.0.0/8
    10.0.0.0/8
    100.64.0.0/10
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.0.0.0/24
    192.0.2.0/24
    192.88.99.0/24
    192.168.0.0/16
    198.18.0.0/15
    198.51.100.0/24
    203.0.113.0/24
    224.0.0.0/4
    240.0.0.0/4
    255.255.255.255/32
)

ipv6_reserved_ipaddrs=(
    ::/128
    ::1/128
    ::ffff:0:0/96
    ::ffff:0:0:0/96
    64:ff9b::/96
    100::/64
    2001::/32
    2001:20::/28
    2001:db8::/32
    2002::/16
    fc00::/7
    fe80::/10
    ff00::/8
)

gfwlist_txt_perl_script_string='
if (/URL Keywords/i) { $null = <> until $null =~ /^!/ }
s#^\s*+$|^!.*+$|^@@.*+$|^\[AutoProxy.*+$|^/.*/$##i;
s@^\|\|?|\|$@@;
s@^https?:/?/?@@i;
s@(?:/|%).*+$@@;
s@\*[^.*]++$@\n@;
s@^.*?\*[^.]*+(?=[^*]+$)@@;
s@^\*?\.|^.*\.\*?$@@;
s@(?=[^0-9a-zA-Z.-]).*+$@@;
s@^\d+\.\d+\.\d+\.\d+(?::\d+)?$@@;
s@^\s*+$@@
'

gfwlist_txt_append_domain_names() {
    printf "twimg.edgesuite.net\n"
    printf "blogspot.ae\nblogspot.al\nblogspot.am\nblogspot.ba\nblogspot.be\nblogspot.bg\nblogspot.bj\nblogspot.ca\nblogspot.cat\nblogspot.cf\nblogspot.ch\nblogspot.cl\nblogspot.co.at\nblogspot.co.id\nblogspot.co.il\nblogspot.co.ke\nblogspot.com\nblogspot.com.ar\nblogspot.com.au\nblogspot.com.br\nblogspot.com.by\nblogspot.com.co\nblogspot.com.cy\nblogspot.com.ee\nblogspot.com.eg\nblogspot.com.es\nblogspot.com.mt\nblogspot.com.ng\nblogspot.com.tr\nblogspot.com.uy\nblogspot.co.nz\nblogspot.co.uk\nblogspot.co.za\nblogspot.cv\nblogspot.cz\nblogspot.de\nblogspot.dk\nblogspot.fi\nblogspot.fr\nblogspot.gr\nblogspot.hk\nblogspot.hr\nblogspot.hu\nblogspot.ie\nblogspot.in\nblogspot.is\nblogspot.it\nblogspot.jp\nblogspot.kr\nblogspot.li\nblogspot.lt\nblogspot.lu\nblogspot.md\nblogspot.mk\nblogspot.mr\nblogspot.mx\nblogspot.my\nblogspot.nl\nblogspot.no\nblogspot.pe\nblogspot.pt\nblogspot.qa\nblogspot.re\nblogspot.ro\nblogspot.rs\nblogspot.ru\nblogspot.se\nblogspot.sg\nblogspot.si\nblogspot.sk\nblogspot.sn\nblogspot.td\nblogspot.tw\nblogspot.ug\nblogspot.vn\n"
    printf "google.ac\ngoogle.ad\ngoogle.ae\ngoogle.al\ngoogle.am\ngoogle.as\ngoogle.at\ngoogle.az\ngoogle.ba\ngoogle.be\ngoogle.bf\ngoogle.bg\ngoogle.bi\ngoogle.bj\ngoogle.bs\ngoogle.bt\ngoogle.by\ngoogle.ca\ngoogle.cat\ngoogle.cc\ngoogle.cd\ngoogle.cf\ngoogle.cg\ngoogle.ch\ngoogle.ci\ngoogle.cl\ngoogle.cm\ngoogle.cn\ngoogle.co.ao\ngoogle.co.bw\ngoogle.co.ck\ngoogle.co.cr\ngoogle.co.id\ngoogle.co.il\ngoogle.co.in\ngoogle.co.jp\ngoogle.co.ke\ngoogle.co.kr\ngoogle.co.ls\ngoogle.com\ngoogle.co.ma\ngoogle.com.af\ngoogle.com.ag\ngoogle.com.ai\ngoogle.com.ar\ngoogle.com.au\ngoogle.com.bd\ngoogle.com.bh\ngoogle.com.bn\ngoogle.com.bo\ngoogle.com.br\ngoogle.com.bz\ngoogle.com.co\ngoogle.com.cu\ngoogle.com.cy\ngoogle.com.do\ngoogle.com.ec\ngoogle.com.eg\ngoogle.com.et\ngoogle.com.fj\ngoogle.com.gh\ngoogle.com.gi\ngoogle.com.gt\ngoogle.com.hk\ngoogle.com.jm\ngoogle.com.kh\ngoogle.com.kw\ngoogle.com.lb\ngoogle.com.lc\ngoogle.com.ly\ngoogle.com.mm\ngoogle.com.mt\ngoogle.com.mx\ngoogle.com.my\ngoogle.com.na\ngoogle.com.nf\ngoogle.com.ng\ngoogle.com.ni\ngoogle.com.np\ngoogle.com.om\ngoogle.com.pa\ngoogle.com.pe\ngoogle.com.pg\ngoogle.com.ph\ngoogle.com.pk\ngoogle.com.pr\ngoogle.com.py\ngoogle.com.qa\ngoogle.com.sa\ngoogle.com.sb\ngoogle.com.sg\ngoogle.com.sl\ngoogle.com.sv\ngoogle.com.tj\ngoogle.com.tr\ngoogle.com.tw\ngoogle.com.ua\ngoogle.com.uy\ngoogle.com.vc\ngoogle.com.vn\ngoogle.co.mz\ngoogle.co.nz\ngoogle.co.th\ngoogle.co.tz\ngoogle.co.ug\ngoogle.co.uk\ngoogle.co.uz\ngoogle.co.ve\ngoogle.co.vi\ngoogle.co.za\ngoogle.co.zm\ngoogle.co.zw\ngoogle.cv\ngoogle.cz\ngoogle.de\ngoogle.dj\ngoogle.dk\ngoogle.dm\ngoogle.dz\ngoogle.ee\ngoogle.es\ngoogle.fi\ngoogle.fm\ngoogle.fr\ngoogle.ga\ngoogle.ge\ngoogle.gf\ngoogle.gg\ngoogle.gl\ngoogle.gm\ngoogle.gp\ngoogle.gr\ngoogle.gy\ngoogle.hn\ngoogle.hr\ngoogle.ht\ngoogle.hu\ngoogle.ie\ngoogle.im\ngoogle.io\ngoogle.iq\ngoogle.is\ngoogle.it\ngoogle.je\ngoogle.jo\ngoogle.kg\ngoogle.ki\ngoogle.kz\ngoogle.la\ngoogle.li\ngoogle.lk\ngoogle.lt\ngoogle.lu\ngoogle.lv\ngoogle.md\ngoogle.me\ngoogle.mg\ngoogle.mk\ngoogle.ml\ngoogle.mn\ngoogle.ms\ngoogle.mu\ngoogle.mv\ngoogle.mw\ngoogle.ne\ngoogle.net\ngoogle.nl\ngoogle.no\ngoogle.nr\ngoogle.nu\ngoogle.org\ngoogle.pl\ngoogle.pn\ngoogle.ps\ngoogle.pt\ngoogle.ro\ngoogle.rs\ngoogle.ru\ngoogle.rw\ngoogle.sc\ngoogle.se\ngoogle.sh\ngoogle.si\ngoogle.sk\ngoogle.sm\ngoogle.sn\ngoogle.so\ngoogle.sr\ngoogle.st\ngoogle.td\ngoogle.tg\ngoogle.tk\ngoogle.tl\ngoogle.tm\ngoogle.tn\ngoogle.to\ngoogle.tt\ngoogle.vg\ngoogle.vu\ngoogle.ws\n"
}

font_bold() {
    printf "\e[1m$*\e[0m"
}

color_red() {
    printf "\e[35m$*\e[0m"
}

color_yellow() {
    printf "\e[31m$*\e[0m"
}

log_warn() {
    echo "$(font_bold $(color_red '[WARN]')) $*" 1>&2
}

log_error() {
    echo "$(font_bold $(color_yellow '[ERROR]')) $*" 1>&2
    exit 1
}

ignore() {
    true
}

is_true() {
    [ "$1" = 'true' ]
}

is_false() {
    [ "$1" = 'false' ]
}

file_is_exists() {
    [ -f "$1" ]
}

command_is_exists() {
    command -v "$1" &>/dev/null
}

process_is_running() {
    kill -0 "$1" &>/dev/null
}

sstproxy_is_started() {
    iptables -t mangle -nL SSTP_OUTPUT &>/dev/null
}

resolve_hostname() {
    local ipaddr=""
    while [ -z "$ipaddr" ]; do
        ipaddr=$(ping -nq -c1 -t1 -W1 "$1" | head -n1 | awk -F'[()]' '{print $2}') || ignore
    done
    echo "$ipaddr"
}

waiting_network() {
    until ping -nq -c1 -W1 "$1" &>/dev/null; do true; done
}

load_config() {
    file_is_exists "$ss_tproxy_config"   || log_error "file not found: $ss_tproxy_config"
    source "$ss_tproxy_config" || log_error "failed to load the conf file, exit-code: $?"
    file_is_exists "$file_gfwlist_txt"   || log_error "file not found: $file_gfwlist_txt"
    file_is_exists "$file_gfwlist_ext"   || log_error "file not found: $file_gfwlist_ext"
    file_is_exists "$file_chnroute_txt"  || log_error "file not found: $file_chnroute_txt"
    file_is_exists "$file_chnroute_set"  || log_error "file not found: $file_chnroute_set"
    file_is_exists "$file_chnroute6_set" || log_error "file not found: $file_chnroute6_set"

    if sstproxy_is_started; then
        source "$file_dnsserver_pid" || log_error "failed to load the pid file, exit-code: $?"
    else
        rm -f "$file_dnsserver_pid" &>/dev/null || ignore
    fi

    case "$opts_ss_netstat" in
        auto)
            if command_is_exists 'ss'; then
                netstat='ss'
            elif command_is_exists 'netstat'; then
                netstat='netstat'
            else
                log_error "command not found: ss/netstat"
            fi
            ;;
        ss)
            command_is_exists 'ss' && netstat='ss' || log_error "command not found: ss"
            ;;
        netstat)
            command_is_exists 'netstat' && netstat='netstat' || log_error "command not found: netstat"
            ;;
        *)
            log_error "opts_ss_netstat option value is invalid: $opts_ss_netstat"
            ;;
    esac
}

check_depend() {
    command_is_exists 'curl'     || log_warn  "command not found: curl"
    command_is_exists 'ip'       || log_error "command not found: ip"
    command_is_exists 'ipset'    || log_error "command not found: ipset"
    command_is_exists 'dnsmasq'  || log_error "command not found: dnsmasq"
    command_is_exists 'iptables' || log_error "command not found: iptables"
    [ "$ipv6" = 'enable' ] && { command_is_exists 'ip6tables' || log_error "command not found: ip6tables"; }

    case "$mode" in
        gfwlist)
            command_is_exists 'perl'   || log_warn  "command not found: perl"
            command_is_exists 'base64' || log_warn  "command not found: base64"
            ;;
        chnroute)
            if [ "$chinadnsng_enable" = 'false' ]; then
                command_is_exists 'chinadns'    || log_error "command not found: chinadns"
            else
                command_is_exists "chinadns-ng" || log_error "command not found: chinadns-ng"
            fi
            ;;
    esac
}

update_chnonly() {
    local url='https://raw.github.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf'
    local data; data=$(curl -4sSkL "$url") || log_error "download failed, exit-code: $?"
    echo "$data" | gawk -F/ '{print $2}' >$file_gfwlist_txt
}

update_gfwlist() {
    local url='https://raw.github.com/gfwlist/gfwlist/master/gfwlist.txt'
    local data; data=$(curl -4sSkL "$url") || log_error "download failed, exit-code: $?"

    local base64_decode=''
    base64 -d       </dev/null &>/dev/null && base64_decode='base64 -d'
    base64 --decode </dev/null &>/dev/null && base64_decode='base64 --decode'
    [ "$base64_decode" ] || log_error "command args is not support: base64 -d/--decode"

    echo "$data" | $base64_decode | { perl -pe "$gfwlist_txt_perl_script_string"; gfwlist_txt_append_domain_names; } | sort | uniq >$file_gfwlist_txt
}

update_chnroute() {
    local url='http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest'
    local data; data=$(curl -4sSkL "$url") || log_error "download failed, exit-code: $?"

    for reserved_addr in "${ipv4_reserved_ipaddrs[@]}"; do echo "$reserved_addr"; done >$file_chnroute_txt
    echo "$data" | grep CN | grep ipv4 | gawk -F'|' '{printf("%s/%d\n", $4, 32-log($5)/log(2))}' >>$file_chnroute_txt
    echo 'create chnroute hash:net family inet' >$file_chnroute_set; sed -r 's/^.+$/add chnroute &/' $file_chnroute_txt >>$file_chnroute_set

    echo 'create chnroute6 hash:net family inet6' >$file_chnroute6_set
    for reserved_addr in "${ipv6_reserved_ipaddrs[@]}"; do echo "add chnroute6 $reserved_addr"; done >>$file_chnroute6_set
    echo "$data" | grep CN | grep ipv6 | gawk -F'|' '{printf("add chnroute6 %s/%d\n", $4, $5)}' >>$file_chnroute6_set
}

flush_dnscache() {
    kill -HUP "$status_dnsmasq_pid"
}

flush_gfwlist() {
    ipset -X gfwlist &>/dev/null || true
    ipset -X gfwlist6 &>/dev/null || true
}

flush_iptables() {
    # TODO
}

show_iptables() {
    echo -e "\e[36;1m==> mangle <==\e[0m"
    iptables -t mangle -nvL --line-numbers
    echo
    echo -e "\e[36;1m==> nat <==\e[0m"
    iptables -t nat -nvL --line-numbers
}

start_resolver_gfwlist() {
    local dnsmasq_config_string=$(cat <<EOF
$([ "$dnsmasq_log_enable" = 'true' ] && echo 'log-queries')
log-async = 20
domain-needed
cache-size = $dnsmasq_cache_size
$([ $(dnsmasq --help | grep -c min-cache-ttl) -ne 0 ] && echo "min-cache-ttl = $dnsmasq_cache_time")
no-negcache
no-resolv
port = 60053
server = $dns_direct
$(
dns_server=$(tr ':' '#' <<<"$dns_remote")
{ cat $file_gfwlist_txt; grep -Ev '^[ \t]*$|^[ \t]*#|/' $file_gfwlist_ext; } | while read domain_name; do
  echo "server = /$domain_name/$dns_server"
  echo "ipset = /$domain_name/gfwlist,gfwlist6"
done
)
$(for server_addr in "${server_addrs[@]}"; do echo "address = $server_addr"; done)
$([ "$dnsmasq_conf_dir" ] && echo "conf-dir = $dnsmasq_conf_dir")
EOF
)
    status_dnsmasq_pid=$(dnsmasq --no-daemon --conf-file=<(echo "$dnsmasq_config_string") </dev/null &>>$dnsmasq_log_file & echo $!)
}

start_resolver_chnroute() {
    if [ "$chinadnsng_enable" = 'true' ]; then
        status_chinadnsng_pid=$(chinadns-ng $([ "$chinadnsng_verbose" = 'true' ] && echo "--verbose") </dev/null &>>$chinadnsng_logfile & echo $!)
    else
        local temp_chnroute_txt=$(mktemp)
        cat $file_chnroute_txt >$temp_chnroute_txt
        echo "$dns_direct/32" >>$temp_chnroute_txt
        for intranet in "${ipts_intranet[@]}"; do echo "$intranet"; done >>$temp_chnroute_txt

        local chinadns_params="-b 127.0.0.1 -p 65353 -s $dns_direct,$dns_remote -c $temp_chnroute_txt -y 0"
        [ "$chinadns_mutation" = 'true' ] && chinadns_params+=' -m'
        [ "$chinadns_verbose"  = 'true' ] && chinadns_params+=' -v'

        status_chinadns_pid=$(chinadns $chinadns_params </dev/null &>>$chinadns_logfile & echo $!)
    fi

    local dnsmasq_config_string=$(cat <<EOF
$([ "$dnsmasq_log_enable" = 'true' ] && echo 'log-queries')
log-async = 20
domain-needed
cache-size = $dnsmasq_cache_size
$([ $(dnsmasq --help | grep -c min-cache-ttl) -ne 0 ] && echo "min-cache-ttl = $dnsmasq_cache_time")
no-negcache
no-resolv
port = 60053
server = 127.0.0.1#65353
$(for server_addr in "${server_addrs[@]}"; do echo "address = $server_addr"; done)
$([ "$dnsmasq_conf_dir" ] && echo "conf-dir = $dnsmasq_conf_dir")
EOF
)
    status_dnsmasq_pid=$(dnsmasq --no-daemon --conf-file=<(echo "$dnsmasq_config_string") </dev/null &>>$dnsmasq_log_file & echo $!)
}

start_resolver() {
    local server_addrs=()
    for server in "${proxy_server[@]}"; do
        if [ $(grep -Ec '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' <<<"$server") -eq 0 ]; then
            server_addrs+=("/$server/$(ping -nq -c1 -t1 -W1 $server | head -n1 | gawk -F'[()]' '{print $2}')")
        fi
    done
    case "$mode" in
        gfwlist)
            start_resolver_gfwlist
            ;;
        chnroute)
            start_resolver_chnroute
            ;;
    esac
}

start() {
    # TODO
}

stop() {
    # TODO
}

status() {
    # TODO
}

help() {
    # TODO
}

main() {
    # TODO
}
main "$@"
