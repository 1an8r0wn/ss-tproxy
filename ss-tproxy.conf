## 代理模式
#
# 因脚本不断的更新、改进，部分模式的命名可能不是很准确
# ss-tproxy 脚本目前已支持 v2ray、ss/ssr、socks5 透明代理
# 脚本不建议在 v2ray、ss/ssr、socks5 上配置 acl/pac 等过滤规则
# 因为分流任务已被 ss-tproxy 接手处理，配置过滤规则可能会导致问题
#
# global 模式：全部流量都走代理，不进行分流
# gfwlist 模式：gfwlist 域名走代理，其他均走直连
# chnonly 模式：chnlist 域名走代理，其他均走直连
# chnroute 模式：chnroute 地址走直连，其他均走代理
#
# chnonly 模式与 gfwlist 模式仅仅是域名列表不同，底层实现是完全相同的
# 所以下面并没有单独分出 chnonly mode，你只需要选择对应的 gfwlist mode
#
# tcponly 的 mode 表示仅代理 TCP 流量，不处理 UDP 流量，DNS 使用 TCP 方式解析
# 这些 mode 主要用于不支持 udp relay 的 ss/ssr、socks5 代理（v2ray 没有此问题）
#
# 关于代理模式的更多细节，请参考 README.md 或 https://www.zfl9.com/ss-redir.html
#
#mode='v2ray_global'            # v2ray  global   模式
#mode='v2ray_gfwlist'           # v2ray  gfwlist  模式
#mode='v2ray_chnroute'          # v2ray  chnroute 模式
#mode='tproxy_global'           # ss/ssr global   模式
#mode='tproxy_gfwlist'          # ss/ssr gfwlist  模式
mode='tproxy_chnroute'          # ss/ssr chnroute 模式
#mode='tproxy_global_tcp'       # ss/ssr global   模式 (tcponly)
#mode='tproxy_gfwlist_tcp'      # ss/ssr gfwlist  模式 (tcponly)
#mode='tproxy_chnroute_tcp'     # ss/ssr chnroute 模式 (tcponly)
#mode='tun2socks_global'        # socks5 global   模式
#mode='tun2socks_gfwlist'       # socks5 gfwlist  模式
#mode='tun2socks_chnroute'      # socks5 chnroute 模式
#mode='tun2socks_global_tcp'    # socks5 global   模式 (tcponly)
#mode='tun2socks_gfwlist_tcp'   # socks5 gfwlist  模式 (tcponly)
#mode='tun2socks_chnroute_tcp'  # socks5 chnroute 模式 (tcponly)

## v2ray 配置
# 适用于 v2ray_* 模式
# redir  地址即 v2ray "inbound" -> "dokodemo-door" -> "followRedirect=true"  的监听地址
# tunnel 地址即 v2ray "inbound" -> "dokodemo-door" -> "followRedirect=false" 的监听地址
v2ray_server='node.proxy.net'        # v2ray 服务器地址
v2ray_redir='127.0.0.1:60080'        # v2ray redir 地址
v2ray_tunnel='127.0.0.1:60053'       # v2ray tunnel 地址
v2ray_runcmd='systemctl start v2ray' # 启动 v2ray 的命令
v2ray_stopcmd='systemctl stop v2ray' # 停止 v2ray 的命令

## ss/ssr 配置
# 适用于 tproxy_* 模式
server_addr='server'                # 服务器地址
server_port='1234'                  # 服务器端口
server_method='rc4-md5'             # 加密方式
server_passwd='password'            # 账户密码
server_use_ssr='false'              # 启用 SSR true/false
server_protocol='origin'            # 协议插件 (SSR)
server_protocol_param=''            # 协议参数 (SSR)
server_obfs='plain'                 # 混淆插件 (SSR)
server_obfs_param=''                # 混淆参数 (SSR)

## ss-redir 配置
# 适用于 tproxy_* 模式
redir_fast_open='true'              # TCP Fast Open
redir_verbose='false'               # 记录详细日志
redir_log='/var/log/ss-redir.log'   # 日志文件路径

## ss-tunnel 配置
# 适用于 tproxy_* 模式
tunnel_verbose='false'              # 记录详细日志
tunnel_log='/var/log/ss-tunnel.log' # 日志文件路径

## socks5 配置
# 适用于 tun2socks_* 模式
socks5_listen='127.0.0.1:1080'       # socks5 本地监听地址
socks5_remote='node.proxy.net'       # socks5 服务器的地址
# 启动 socks5 代理的命令行，必须在后台运行，不能占用前台，请根据实际情况进行修改
# 如果使用非 *_tcp 模式，请确保该 socks5 代理的 udp relay 已开启，否则无法解析 DNS
#socks5_runcmd='service shadowsocks-libev start'                # 通过 service 命令启动
#socks5_runcmd='systemctl start shadowsocks-libev.service'      # 通过 systemctl 命令启动
#socks5_runcmd='ssh -CNf -D 0.0.0.0:1080 user@node.proxy.net'   # 仅限使用 tun2socks*tcp 模式
#socks5_runcmd='systemctl start v2ray.service'                  # 代理至 v2ray 的 socks5 监听端口
socks5_runcmd='nohup ss-local -c /etc/ss-local.json </dev/null &>>/var/log/ss-local.log &'
socks5_stopcmd="pkill -9 '^ss-local$'"                          # 停止 socks5 本地代理的命令

## tun2socks 配置
# 适用于 tun2socks_* 模式
tun2socks_tundev="tun0"                 # tun 网卡
tun2socks_address="10.0.0.1"            # 接口地址
tun2socks_gateway="10.0.0.254"          # 网关地址
tun2socks_netmask="255.255.255.0"       # 网络掩码
tun2socks_log='/var/log/tun2socks.log'  # 日志文件

## dnsmasq 配置
# 根据模式选择使用
dnsmasq_gfwlist='/etc/tproxy/gfwlist.txt'       # gfwlist 域名文件
dnsmasq_gfwlist_ext='/etc/tproxy/gfwlist.ext'   # gfwlist 扩展文件
dnsmasq_cache_size='10240'                      # DNS 缓存条目数量
dnsmasq_cache_time='3600'                       # DNS 缓存时间(秒)
dnsmasq_log_on='false'                          # 是否记录 DNS 日志
dnsmasq_log_file='/var/log/dnsmasq.log'         # DNS 日志记录文件

## dnsforwarder 配置
# 根据模式选择使用
dnsfwd_log_on='false'       # 启用日志
dnsfwd_log_dir='/var/log'   # 日志目录
dnsfwd_cache_on='true'      # 启用缓存
dnsfwd_cache_mem='true'     # 内存缓存
dnsfwd_cache_size='1048576' # 缓存大小 byte
dnsfwd_ignore_ttl='true'    # 忽略 TTL

## chinadns 配置
# 适用于 *chnroute* 模式
chinadns_chnroute='/etc/tproxy/chnroute.txt' # 大陆地址列表
chinadns_mutation='true'                     # DNS 压缩指针
chinadns_verbose='false'                     # 记录详细日志
chinadns_log='/var/log/chinadns.log'         # 日志文件路径

## dns 配置
# 直连 DNS 服务器，不能指定端口号，必须为默认端口 53/udp
dns_direct='114.114.114.114'
# 远程 DNS 服务器，必须指明端口号，如 208.67.222.222:443
# 如果代理模式为 *tcp，请确保该 DNS 能够处理 TCP 查询方式
dns_remote='8.8.8.8:53'

## iptables 配置
iptables_pbr_number='100'                        # PBR 路由表号
iptables_pbr_fwmark='0x2333/0x2333'              # PBR fwmark值
iptables_ipset_file='/etc/tproxy/chnroute.set'   # 大陆地址段 ipset 文件
iptables_intranet=(192.168.0.0/16)               # 内网网段，多个空格隔开
